'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var legacy = require('@dicebear/avatars');
var initials = require('initials');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var legacy__default = /*#__PURE__*/_interopDefaultLegacy(legacy);
var initials__default = /*#__PURE__*/_interopDefaultLegacy(initials);

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

var schema$1 = {
  "title": "Options",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "properties": {
    "backgroundColors": {
      "title": "Background Colors",
      "type": "array",
      "items": {
        "type": "string",
        "enum": ["amber", "blue", "blueGrey", "brown", "cyan", "deepOrange", "deepPurple", "green", "grey", "indigo", "lightBlue", "lightGreen", "lime", "orange", "pink", "purple", "red", "teal", "yellow"]
      }
    },
    "backgroundColorLevel": {
      "title": "Background Color Level",
      "default": 600,
      "type": "integer",
      "enum": [50, 100, 200, 300, 400, 500, 600, 700, 800, 900]
    },
    "fontSize": {
      "title": "Font Size",
      "type": "integer",
      "minimum": 1,
      "maximum": 100,
      "default": 50
    },
    "chars": {
      "title": "Chars",
      "type": "number",
      "minimum": 0,
      "maximum": 2,
      "default": 2
    },
    "bold": {
      "title": "Bold",
      "type": "boolean"
    }
  },
  "additionalProperties": false
};

var style = {
  meta: {
    title: 'Initials',
    creator: 'Florian Körner',
    source: 'https://github.com/dicebear/dicebear',
    license: {
      name: 'CC0 1.0',
      url: 'https://creativecommons.org/publicdomain/zero/1.0/'
    }
  },
  schema: schema$1,
  create: function create(_ref) {
    var _options$chars, _options$fontSize;

    var prng = _ref.prng,
        options = _ref.options;
    var defaults = legacy.utils.schema.defaults(schema$1);
    var backgroundColors = [];

    if (options.background) {
      if (Array.isArray(options.background)) {
        backgroundColors.push.apply(backgroundColors, _toConsumableArray(options.background));
      } else {
        backgroundColors.push(options.background);
      }

      options.background = undefined;
    } else {
      Object.keys(legacy__default["default"].color.collection).forEach(function (backgroundColor) {
        if (options.backgroundColors === undefined || options.backgroundColors.length === 0 || options.backgroundColors.indexOf(backgroundColor) !== -1) {
          var _options$backgroundCo;

          var colorCollection = legacy__default["default"].color.collection[backgroundColor];
          backgroundColors.push(colorCollection[(_options$backgroundCo = options.backgroundColorLevel) !== null && _options$backgroundCo !== void 0 ? _options$backgroundCo : defaults.backgroundColorLevel]);
        }
      });
    }

    var backgroundColor = prng.pick(backgroundColors);
    var seedInitials = initials__default["default"](prng.seed.trim()).toLocaleUpperCase().slice(0, (_options$chars = options.chars) !== null && _options$chars !== void 0 ? _options$chars : defaults.chars);
    var fontFamily = 'Arial,sans-serif';
    var fontSize = ((_options$fontSize = options.fontSize) !== null && _options$fontSize !== void 0 ? _options$fontSize : defaults.fontSize) / 100; // prettier-ignore

    var svg = ["<rect width=\"1\" height=\"1\" fill=\"".concat(backgroundColor, "\"></rect>"), options.margin ? "<g transform=\"translate(".concat(options.margin / 100, ", ").concat(options.margin / 100, ")\">") : '', options.margin ? "<g transform=\"scale(".concat(1 - options.margin * 2 / 100, ")\">") : '', "<text x=\"50%\" y=\"50%\" style=\"".concat(options.bold ? 'font-weight: bold;' : '', " font-family: ").concat(fontFamily, "; font-size: ").concat(fontSize, "px\" fill=\"#FFF\" text-anchor=\"middle\" dy=\"").concat((fontSize * .356).toFixed(3), "\">").concat(seedInitials, "</text>"), options.margin ? '</g>' : '', options.margin ? '</g>' : ''].join('');
    options.margin = undefined;
    return {
      attributes: {
        viewBox: '0 0 1 1'
      },
      body: svg
    };
  }
};

/*!
 * DiceBear Initials (@dicebear/avatars-initials-sprites)
 *
 * Code licensed under MIT (https://github.com/dicebear/dicebear/blob/v4/packages/avatars-initials-sprites/LICENSE)
 * Copyright (c) 2021 Florian Körner
 */
var create = style.create,
    meta = style.meta,
    schema = style.schema;
/** @deprecated will be removed in Version 5.0 */

var index = legacy.utils.style.createLegacyWrapper({
  create: create,
  meta: meta,
  schema: schema
});

exports.create = create;
exports["default"] = index;
exports.meta = meta;
exports.schema = schema;
